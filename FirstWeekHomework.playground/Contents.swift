import UIKit

//1- Palindrome. Verilen Stringin palindrome olup olmadığını kontrol eden bir fonksiyon yazınız.

func palindrome(word: String) -> Bool{
    var rword = String(word.reversed())
    var eword = rword.components(separatedBy: CharacterSet.alphanumerics.inverted).joined().lowercased()
    var sword = word.components(separatedBy: CharacterSet.alphanumerics.inverted).joined().lowercased()
    if eword == sword{
        return true
        
    }else{
        return false
    }
}
palindrome(word: "Kesti geveze, tez eve gitsek")


//2- Verilen bir array içerisindeki her bir elemanın sayısını veren bir fonksiyon yazınız.

func arrayCount <T: Any>(arr: [T])-> [String: Int] {
    let strItem = arr.map{ String(describing: $0) }
    let mapItem = strItem.map { ($0, 1) }
    let count = Dictionary(mapItem, uniquingKeysWith: +)
    return count
}
arrayCount(arr: ["1","1","1","2",2])


//3- "*" Karakterinden piramit oluşturan fonksiyonu yazınız. Parametre olarak kaç katlı olacağı alınsın.

func pyramit(num: Int){
    for x in 1...num{
        print( String.init(repeating: "*", count: x) + String.init(repeating: " ", count: num - x) )
    }
}
pyramit(num: 4)



//4- Yazdığınız piramit fonksiyonun çıktısını ortalı olacak şekilde yazınız.

func pyramitTwo(num: Int){
    for x in 1...num{
        print(String.init(repeating: " ", count: num - x) + String.init(repeating: "* ", count: x))
    }
}
pyramitTwo(num: 4)

//                   ---- 5 ----

//Problem 1 - If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

func multipleSum(number: Int) -> Int{
    var sum = 0
    for  i in 1..<number{
        if (i % 3 == 0) || (i % 5 == 0){
            sum += i
        }
    }
    return sum
}
multipleSum(number: 1000)


//Problem 2 - Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

func fibonacci(range: Int) -> Int{
    var firstNum = 0
    var secondNum = 1
    var totalSum = 0
    
    while secondNum < range {
        var result = firstNum + secondNum
        firstNum = secondNum
        secondNum = result
        
        if(secondNum % 2 == 0){
            totalSum += secondNum
        }
    }
    return totalSum
}
fibonacci(range: 4000000)


//Problem 3 - The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?

func primeFactor() -> Int{
    var number = 600851475143
    var division = 2
    while division <= number {
        if number % division == 0 {
            number = number / division
        } else {
            division += 1
        }
    }
    return division
}
print(primeFactor())
